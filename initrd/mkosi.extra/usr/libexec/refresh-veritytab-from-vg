#!/usr/bin/sh
set -eu

die() {
  if [ $# -gt 0 ]; then
    >&2 printf "$@"
  fi
  exit 1
}

usage() {
  printf 'Usage: %s [target_vg]\n' "${0##*/}"
  printf 'Update /etc/veritytab based on the LVs in the given LVM volume group (default: "vg-sys")\n'
}

if [ $# -gt 1 ]; then
  usage >&2
  exit 2
fi

if [ $# -gt 0 ] && [ "$1" = '--help' ]; then
  usage
  exit 0
fi

source /etc/os-release
# Same format as the systemd-sysupdate architecture
arch="$(uname -m | tr '_' '-')"

target_vg='vg-sys'
image_id="${IMAGE_ID-}"
image_version="${IMAGE_VERSION-}"

if [ $# -gt 0 ]; then
  target_vg="$1"; shift
fi

[ -n "${image_id}" ] || die 'Missing IMAGE_ID in /etc/os-release\n'
[ -n "${image_version}" ] || die 'Missing IMAGE_VERSION in /etc/os-release\n'

printf 'Image version: %s\n' "${image_version}"

printf 'Checking if VG %s exists\n' "${target_vg}"
vgdisplay -s "${target_vg}" || die 'Create the target VG %s first\n' "${target_vg}"
lvs "${target_vg}" || true

if ! [ -s "/etc/veritytab" ]; then
  # sed (used below) doesn't behave well on a zero length file.
  printf '\n' >> /etc/veritytab
fi

ca_file='/etc/secure-boot/verity.crt'
if [ -n "${CREDENTIALS_DIRECTORY-}" ] && [ -e "${CREDENTIALS_DIRECTORY-}/verity.crt" ]; then
  ca_file="${CREDENTIALS_DIRECTORY-}/verity.crt"
fi

kernel_cmdline_arg() {
  [ $# -eq 1 ] || die 'Usage: kernel_cmdline_arg <search>\n'

  argname="$1";shift
  set -- $(cat /proc/cmdline)
  for arg in "$@"; do
    case "${arg}" in
      "${argname}="*)
        printf '%s' "${arg#*=}"
        return
        ;;
    esac
  done
}

image_prefix="${image_id}_${image_version}"
for image_type in root usr; do
  lv_name="${image_prefix}_${image_type}-${arch}"
  verity_roothash="$(kernel_cmdline_arg "${image_type}hash")"
  if [ -z "${verity_roothash}" ]; then
    verity_sig_path="/dev/${target_vg}/${lv_name}-verity-sig"
    [ -e "${verity_sig_path}" ] || continue
    verity_roothash="$(jq -j '.rootHash' < "${verity_sig_path}")" || continue
    if [ -n "${verity_roothash}" ]; then
      roothash_file="$(mktemp -t refresh-verity-XXXXXXX.roothash)"
      printf '%s' "${verity_roothash}" > "${roothash_file}"
      printf 'Checking signature on %s\n' "${verity_sig_path}"
      roothash_verified="$(jq -j '.signature' < "${verity_sig_path}" | \
        openssl smime -verify -binary \
          -inform der -CAfile "${ca_file}" \
          -content "${roothash_file}" || true)"
      if [ -z "${roothash_verified}" ] || [ "${roothash_verified}" != "${verity_roothash}" ]; then
        >&2 printf 'Verity root hash signature verification failed for %s\n' "${verity_sig_path}"
        rm -f "${roothash_file}"
        continue
      fi
      rm -f "${roothash_file}"
    fi
  fi
  if [ -n "${verity_roothash}" ]; then
    sed -i \
      -e "/^${image_type} /d" \
      -e "\$a ${image_type} /dev/${target_vg}/${lv_name} /dev/${target_vg}/${lv_name}-verity ${verity_roothash} auto,x-initrd.attach" \
      /etc/veritytab
    printf 'Added %s to /etc/veritytab\n' "${target_vg}/${lv_name}"
    #systemctl add-wants --runtime "dev-mapper-${image_type}.device" "systemd-veritysetup@${image_type}.service"
    mkdir -p "/run/systemd/system/dev-mapper-${image_type}.device.requires"
    ln -sfv "../systemd-veritysetup@${image_type}.service" "/run/systemd/system/dev-mapper-${image_type}.device.requires/systemd-veritysetup@${image_type}.service"
  fi
done
