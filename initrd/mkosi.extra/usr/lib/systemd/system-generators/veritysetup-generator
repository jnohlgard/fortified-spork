#!/usr/bin/sh
set -eu

die() {
  if [ $# -gt 0 ]; then
    >&2 printf "$@"
  fi
  exit 1
}

usage() {
  printf 'Usage: %s <output-dir> [early-dir] [late-dir]\n' "${0##*/}"
}

kernel_cmdline_arg() {
  [ $# -eq 1 ] || die 'Usage: kernel_cmdline_arg <search>\n'

  argname="$1";shift
  set -- $(cat /proc/cmdline)
  for arg in "$@"; do
    case "${arg}" in
      "${argname}="*)
        printf '%s' "${arg#*=}"
        return
        ;;
    esac
  done
}

if [ $# -lt 1 ] || [ $# -gt 3 ]; then
  >&2 usage
  exit 2
fi

if [ $# -gt 0 ] && [ "$1" = '--help' ]; then
  usage
  exit 0
fi

source /etc/os-release

outdir="$1";shift

arch="$(uname -m | tr '_' '-')"
ca_file='/etc/secure-boot/verity.crt'

image_path='/dev/vg-sys'
image_sig_dir="${image_path}"
image_prefix="${IMAGE_ID}_${IMAGE_VERSION}"
for image_type in root usr; do
  image_name="${image_prefix}_${image_type}-${arch}"
  verity_roothash="$(kernel_cmdline_arg "${image_type}hash")"
  if [ -z "${verity_roothash}" ]; then
    verity_sig_path="${image_sig_dir}/${image_name}-verity-sig"
    [ -e "${verity_sig_path}" ] || continue
    verity_roothash="$(jq -j '.rootHash' < "${verity_sig_path}")" || continue
    if [ -n "${verity_roothash}" ]; then
      roothash_file="$(mktemp -t "verity-${image_type}XXXXXXX.roothash")"
      printf '%s' "${verity_roothash}" > "${roothash_file}"
      printf 'Checking signature on %s\n' "${verity_sig_path}"
      roothash_verified="$(jq -j '.signature' < "${verity_sig_path}" | \
        base64 -d | \
        openssl smime -verify -binary \
          -inform der -CAfile "${ca_file}" \
          -content "${roothash_file}" || true)"
      if [ -z "${roothash_verified}" ] || [ "${roothash_verified}" != "${verity_roothash}" ]; then
        >&2 printf 'Verity root hash signature verification failed for %s\n' "${verity_sig_path}"
        rm -f "${roothash_file}"
        continue
      fi
      rm -f "${roothash_file}"
    fi
  fi
  if [ -n "${verity_roothash}" ]; then
    image_escaped="$(systemd-escape -p "${image_path}/${image_name}")"
    cat > "${outdir}/systemd-veritysetup@${image_type}.service" <<-EOF
	[Unit]
	Description=Integrity Protection Setup for %I
	Documentation=man:veritytab(5) man:systemd-veritysetup-generator(8) man:systemd-veritysetup@.service(8)
	DefaultDependencies=no
	IgnoreOnIsolate=yes
	After=veritysetup-pre.target systemd-udevd-kernel.socket
	Before=blockdev@dev-mapper-%i.target
	Wants=blockdev@dev-mapper-%i.target
	Conflicts=umount.target
	Before=umount.target
	Before=veritysetup.target
	BindsTo=${image_escaped}.device
	After=${image_escaped}.device
	BindsTo=${image_escaped}\x2dverity.device
	After=${image_escaped}\x2dverity.device
	
	[Service]
	Type=oneshot
	RemainAfterExit=yes
	ExecStart=/usr/lib/systemd/systemd-veritysetup attach '%I' '${image_path}/${image_name}' '${image_path}/${image_name}-verity' '${verity_roothash}' 'auto,x-initrd.attach'
	ExecStop=/usr/lib/systemd/systemd-veritysetup detach '%I'
	EOF
    printf 'Created systemd-veritysetup unit for %s in %s\n' \
      "${image_path}/${image_name}" \
      "${outdir}/systemd-veritysetup@${image_type}.service"
    mkdir -p "${outdir}/dev-mapper-${image_type}.device.requires"
    ln -sfv "../systemd-veritysetup@${image_type}.service" "${outdir}/dev-mapper-${image_type}.device.requires/systemd-veritysetup@${image_type}.service"
    mkdir -p "${outdir}/veritysetup.target.requires"
    ln -sfv "../systemd-veritysetup@${image_type}.service" "${outdir}/veritysetup.target.requires/systemd-veritysetup@${image_type}.service"
  fi
done
