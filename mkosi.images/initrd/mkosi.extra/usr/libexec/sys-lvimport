#!/usr/bin/sh
set -eu

die() {
  if [ $# -gt 0 ]; then
    >&2 printf "$@"
  fi
  exit 1
}

usage() {
  printf 'Usage: %s <lv_name> [image_source]\n' "${0##*/}"
  printf 'Install the system to the given LVM volume group (default: "vg-sys")\n'
}

if [ $# -gt 3 ]; then
  usage >&2
  exit 2
fi

if [ $# -gt 0 ] && [ "$1" = '--help' ]; then
  usage
  exit 0
fi

source /etc/os-release
# Same format as the systemd-sysupdate architecture
arch="$(uname -m | tr '_' '-')"

target_vg='vg-sys'
install_from='/run/spork/sysimages'
image_id="${IMAGE_ID-}"
image_version="${IMAGE_VERSION-}"

if [ $# -gt 0 ]; then
  target_vg="$1"; shift
fi
if [ $# -gt 0 ]; then
  install_from="$1"; shift
fi
if [ $# -gt 0 ]; then
  image_id="$1";shift
fi
if [ $# -gt 0 ]; then
  image_version="$1";shift
fi

[ -n "${image_id}" ] || die 'Missing image_id\n'
[ -d "${install_from}" ] || die 'Not a directory: %s\n' "${install_from}"

find_newest_version() {
  [ $# -eq 2 ] || die 'Usage: find_newest_version <path> <image_id>\n'
  find "${1}" -mindepth 1 -maxdepth 1 -name "${2}_*.*-${arch}.raw" -not -type d | while read -r image_path; do
    image_file="${image_path##*/}"
    image_name="${image_file%.*-${arch}.raw}"
    image_version="${image_name#${2}_}"
    printf '%s\n' "${image_version}"
  done | sort -V | tail -n 1
}

create_vg() {
  [ $# -eq 1 ] || die 'Usage: create_vg <vg_name>\n'
  local vg="$1"; shift

  local pvs_found="$(pvs -o pv_name,pv_uuid,pv_size,pv_free --noheadings -S 'pv_in_use != used')"
  printf 'Select PVs to use for VG %s (showing unused PVs only), space-separated list:\n' "${vg}"
  printf '%s\n' "${pvs_found}" | nl
  local blkdevs=

  while [ -z "${blkdevs}" ]; do
    local selected_pvs="$(systemd-ask-password --icon drive-harddisk -e 'Enter PV number(s) or device node(s), e.g. "/dev/sda1" (space-separated list)')"
    for pv in ${selected_pvs}; do
      local dev=
      case "${pv}" in
        /dev/*)
          if [ -b "${pv}" ]; then
            # Block device node
            dev="${pv}"
          fi
          ;;
        *[0-9]*)
          if printf '%u' "${pv}" >/dev/null; then
            # Valid number, pick a line in the list
            local line_num="$(printf '%u' "${pv}")"
            dev="$(printf '%s\n' "${pvs_found}" | awk "FNR==\"${line_num}\" { print \$1 }")"
            # NB: dev will be empty if the line number is not within the range of lines in pvs_found
          fi
          ;;
      esac
      if [ -z "${dev}" ]; then
        >&2 printf 'Bad input "%s"\n' "${pv}"
        >&2 printf 'Try again.\n'
        blkdevs=
        break
      fi
      blkdevs="${blkdevs} ${dev}"
    done
  done

  vgcreate -v \
    --pvmetadatacopies 2 \
    --vgmetadatacopies all \
    --setautoactivation y \
    "${vg}" \
    ${blkdevs}
}

lv_size_aligned_from_image_file_size() {
  [ $# -eq 1 ] || die 'Usage: lv_size_aligned_from_image_file_size <image_file>\n'
  local file_source="$1"
  local file_size_b="$(stat -c %s "${file_source}")"
  local file_size_mib_ceil="$(((file_size_b + 1024 * 1024 - 1) / 1024 / 1024))"
  local lv_size_aligned_mib="$((((file_size_mib + 3) / 4) * 4))"
  printf '%u' "${lv_size_aligned_mib}"
}

lv_from_image() {
  [ $# -eq 2 ] || die 'Usage: lv_from_image <lv_name> <image_source>\n'

  lv_name="$1";shift
  image_source="$1";shift

}

printf 'Installation source dir: %s\n' "${install_from}"
ls -l "${install_from}"
printf '\n'
if [ -z "${image_version}" ]; then
  image_version="$(find_newest_version "${install_from}" "${image_id}")"
fi
printf 'Install version: %s\n' "${image_version}"

printf 'lsblk output:\n'
lsblk -o '+FSTYPE,LABEL'
printf 'These are the PVs currently available:\n'
pvs -o '+pv_used,pv_in_use,pv_tags'
  
printf 'Checking if VG %s exists\n' "${target_vg}"
if ! vgdisplay "${target_vg}" 2>/dev/null; then
  printf 'Creating %s for OS installation\n' "${vg}"
  create_vg "${target_vg}"
fi
lvs "${target_vg}"

printf 'Checking for /etc overlay backing volume\n'
if ! lvdisplay "${target_vg}/overlay-etc"; then
  lvcreate -v -ay \
    -L 500M \
    -n 'overlay-etc' \
    "${target_vg}"
  mkfs.xfs -m rmapbt=1 -L 'etc' "/dev/${target_vg}/overlay-etc"
fi

printf 'Creating LVs and copying blocks and files\n'
image_prefix="${image_id}_${image_version}"
for image_type in root usr; do
  image_source="${install_from}/${image_prefix}.${image_type}.raw"
  [ -f "${image_source}" ] || continue
  lv_name="${image_prefix}_${image_type}"

  if lvdisplay "${target_vg}/${lv_name}" 2>/dev/null; then
    printf 'LV %s already exists! Skipping\n'
    continue
  fi

  # LV size in MiB, rounded up to nearest 4 MiB boundary
  lv_size_mib="$(lv_size_aligned_from_image_file_size "${image_source}")"

  verity_source="${image_source%.raw}-verity.raw"
  if [ -r "${verity_source}" ]; then
    printf 'Found dm-verity image for %s: %s\n' "${image_source##*/}" "${verity_source}"
    verity_size_mib="$(lv_size_aligned_from_image_file_size "${verity_source}")"
    verity_sig_file="${verity_source%.raw}-sig.raw"
    printf 'Creating verity volume %s\n' "${lv_name}-verity"
    if lvdisplay "${target_vg}/${lv_name}-verity" 2>/dev/null; then
      lvremove -v "${target_vg}/${lv_name}-verity"
    fi
    lvcreate -v -ay \
      --addtag "image_type:${image_type}-verity" \
      --addtag "image_id:${image_id}" \
      --addtag "image_version:${image_version}" \
      -L "${verity_size_mib}M" \
      -n "${lv_name}-verity" \
      "${target_vg}"
    printf 'Copying verity hash data...\n'
    dd status=progress bs=4M if="${verity_source}" of="/dev/${target_vg}/${lv_name}-verity"

    if [ -r "${verity_sig_file}" ]; then
      printf 'Found signed verity roothash %s\n' "${verity_sig_file}"
      printf 'Creating verity signature volume %s\n' "${lv_name}-verity-sig"
      if lvdisplay "${target_vg}/${lv_name}-verity-sig" 2>/dev/null; then
        lvremove -v "${target_vg}/${lv_name}-verity-sig"
      fi
      lvcreate -v -ay \
        --addtag "image_type:${image_type}-verity-sig" \
        --addtag "image_id:${image_id}" \
        --addtag "image_version:${image_version}" \
        -L "1M" \
        -n "${lv_name}-verity-sig" \
        "${target_vg}"
      dd status=progress bs=1M \
        if="${verity_sig_file}" \
        of="/dev/${target_vg}/${lv_name}-verity-sig"
    fi
  fi

  printf 'Installing %s to LV %s...\n' "${image_source}" "${target_vg}/${lv_name}"
  lvcreate -v -ay \
    --addtag "image_type:${image_type}" \
    --addtag "image_id:${image_id}" \
    --addtag "image_version:${image_version}" \
    -L "${lv_size_mib}M" \
    -n "${lv_name}" \
    "${target_vg}"
  dd status=progress bs=4M \
    if="${image_source}" \
    of="/dev/${target_vg}/${lv_name}"
done

printf 'VG %s is ready\n' "${target_vg}"

vgdisplay "${target_vg}"
lvs "${target_vg}"
