#!/usr/bin/sh
set -eu

if [ $# -ne 1 ] || [ "$1" = '--help' ]; then
  >&2 printf 'Usage: %s <partition>\n' "${0##*/}"
  exit 2
fi

# Something other than AES to increase the entropy in our security risk.
cipher_algo=twofish-xts-plain64
cipher_keysize=512
# authenticated encryption to ensure the integrity of the partition.
integrity_algo=hmac-sha256

blkdev="$1";shift
luks_label=lukshdrs

keyfile_tmp="$(mktemp -t lukshdrs-temporary-keyfile-XXXXXXXX.bin)"
dd if=/dev/urandom bs=128 count=1 of="${keyfile_tmp}"

cryptsetup luksFormat --type luks2 \
  --key-file "${keyfile_tmp}" \
  --key-slot=0 \
  --label "${luks_label}" \
  --cipher "${cipher_algo}" \
  --key-size "${cipher_keysize}" \
  --integrity "${integrity_algo}" \
  "${blkdev}"

cryptsetup open --key-file "${keyfile_tmp}" "${luks_label}"
mkfs.xfs -m rmapbt=1 -L "${luks_label}" "/dev/mapper/${luks_label}"
cryptsetup close "${luks_label}"

printf 'Enrolling FIDO2 key for encryption unlocking, you may need to enter your FIDO pin next\n'
systemd-cryptenroll --unlock-key-file="${keyfile_tmp}" \
  --fido2-device=auto \
  --fido2-with-client-pin=yes \
  --fido2-with-user-presence=yes \
  "${blkdev}"

# Create a recovery passphrase and wipe the temporary key
systemd-cryptenroll --unlock-key-file="${keyfile_tmp}" \
  --recovery-key \
  --wipe-slot=0 \
  "${blkdev}"

# Shred the temporary key since we don't need it anymore
shred -z -u "${keyfile_tmp}"

printf '\n\n'
printf '%s\n' \
  'Next steps:' \
  '1. Write down the recovery key above on paper!' \
  '2. Create root partition on SSD/HDD' \
  '3. Make backups of this USB drive.' \
  '' \
  '=========================================' \
  '| WRITE DOWN THE RECOVERY KEY ON PAPER! |' \
  '=========================================' \
  ''
